SELECT * FROM ALBUM
-Q1 WHO IS THE SENIOR MOST EMPLOYEE BASED ON JOB TITLE?

SELECT * FROM  EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1

Q2 SELECT * FROM INVOICE

SELECT COUNT(*) AS C, BILLING_COUNTRY
FROM INVOICE 
GROUP BY BILLING_COUNTRY
ORDER BY C DESC

Q3 WHAT ARE TOP 3 VALUES OF TOTAL INVOICE?

SELECT TOTAL FROM INVOICE
ORDER BY TOTAL DESC
LIMIT 3

Q4 WHICH CITY HAS THE BEST CUSTOMERS? WE WOULD LIKE TO THROW A PROMOTIONAL MUSIC FESTIVAL IN TH E CITY WE MADE THE MOST MONEY
.WRITE A QUERY THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTALS 
RETURN BOTH THE CITY NAME  & sSUM OF ALL INVOICE TOTALS ?

SELECT SUM(TOTAL) AS INVOICE_TOTAL, BILLING_CITY
FROM INVOICE
GROUP BY BILLING_CITY
ORDER BY INVOICE_TOTAL DESC

Q5 WHO IS THE BEST CUSTOMER CUSTOMER ? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE DECLARED THE BEST CUSTOMER
WRITE A QUERY THAT RETURNS THE PERSON WHO SPENT THE MOST MONEY?


SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, SUM(INVOICE.TOTAL) AS TOTAL
FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
GROUP BY CUSTOMER.CUSTOMER_ID
ORDER BY TOTAL DESC
LIMIT 1

 Q6 WRITE QUERY TO RETURN THE EMAIL , FIRST NAME, & GENRE OF ALL ROCK MUSIC LISTENERS.
 RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STARTING WITH A

 SELECT DISTINCT EMAIL,FIRST_NAME, LAST_NAME
 FROM CUSTOMER 
 JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
 JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
 WHERE TRACK_ID IN(
     SELECT TRACK_ID FROM TRACK
     JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID
     WHERE GENRE.NAME LIKE'ROCK'
 )
ORDER BY EMAIL;

Q7 SELECT * FROM TRACK

Q8 LETS INVITE THE ARTISTS WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATASET.WRITE QUERY THAT RETURNS THE ARTIST NAME AND TOTAL TRACK COUNT OF THE TOP
10 ROCK BANDS

SELECT ARTIST.ARTIST_ID, ARTIST.NAME,COUNT(ARTIST.ARTIST_ID) AS NUMBER_OF_SONGS
FROM TRACK
JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
WHERE GENRE.NAME LIKE 'ROCK'
GROUP BY ARTIST.ARTIST_ID 
ORDER BY NUMBER_OF_SONGS DESC
LIMIT 10;

Q.9 RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH.
RETURN THE NAME AND MILLISECONDS FOR EACH TRACK.ORDER BY THE SONG LENGTH WITH THE LONGEST SONGS 
LISTED FIRST.

SELECT NAME,MILLISECONDS
FROM TRACK
WHERE MILLISECONDS > (
     SELECT AVG(MILLISECONDS) AS AVG_TRACK_LENGTH
	 FROM TRACK)
ORDER BY MILLISECONDS DESC;

Q.10 FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON ARTISTS 
WRITE A QUERY TO RETURN CUSTOMER NAME,ARTIST NAME AND TOTAL SPENT?

WITH BEST_SELLING_ARTIST AS (
    SELECT ARTIST.ARTIST_ID AS ARTIST_ID, ARTIST.NAME AS ARTIST_NAME, SUM(INVOICE_LINE.UNIT_PRICE*INVOICE_LINE)
    FROM INVOICE_LINE
    JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
    JOIN ALBUM ON ALBUM.ALBUM_ID TRACK.ALBUM_ID 
    JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
    GROUP BY 1
    ORDER BY 3 DESC
LIMIT 1
)












